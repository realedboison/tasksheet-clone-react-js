
  const ActiveClass = () => {
    const [active, setActive] = useState(null);

    const [linksTabs, setLinksTabs] = useState([
      {
        id: 1,
        tabTitle: 'Lorem Ipsum',
        tabClass: 'bg-red-400',
        tabClicked: false,
      },
      {
        id: 2,
        tabTitle: 'Dolor de Vaca',
        tabClass: 'bg-red-500',
        tabClicked: false,
      },
    ]);

    const NavLink = ({ id, tabTitle, isActive, onClick }) => {
      return (
        <a
          href="#"
          onClick={() => navigate(id)}
          className={isActive ? 'bg-blue-500' : ''}
        >
          {tabTitle}
        </a>
      );
    };

    const navigate = (id) => {
      setActive(id);
    };

    return (
      <div>
        {linksTabs.map((item) => (
          <li key={item.id}>
            <NavLink
              {...item}
              isActive={active === item.id}
              onClick={navigate}
            />
          </li>
        ))}
      </div>
    );
  };

  //-----------------------------

  // const handle = (e) => {
  //   let items = document.querySelectorAll('.nav-items');

  //   items.forEach((item) => item.classList.remove('active'));

  //   let target = e.currentTarget;
  //   e.classList.add('active');
  // };
  // <NavItem onClick={handle} />;


//----------------excess code from home header

{/* <NavLink
              to="/workspaces"
              className={({ isActive }) =>
                [
                  'group border-primaryPurple px-8 py-8 pb-8 text-lg font-medium text-lighterGray hover:border-b-[4px] hover:border-solid hover:text-primaryPurple',
                  isActive ? 'bg-primaryPurpleTint' : null,
                ]
                  .filter(Boolean)
                  .join(' ')
              }
            >
              Peppy
            </NavLink> */}

            {/* closed temp */}
            {/* <NavLink
              // style={navLinkStyles}s
              // exact
              to="/home"
              // activeClassName="bg-red-600"
              className="activ border-primaryPurple px-8 py-8 pb-8 text-lg font-medium text-lighterGray hover:border-b-[4px] hover:border-solid hover:text-primaryPurple"
            >
              Home
            </NavLink>
            <NavLink
              to="/workspaces"
              className=" border-2 border-solid border-orange-500"
            >
              Workspaces
            </NavLink>
            <NavLink
              to="/notifications"
              className="border-2 border-solid border-violet-500"
            >
              Notifications
            </NavLink> */}

            ///-------------------------------------------------------- drop down -- css only

                      <button className=" dropdown dropdown-bottom dropdown-end group relative focus:ring">
            {/*    */}
            {/* <label tabIndex={0} className="btn relative m-1"></label> */}
            <div tabIndex={0} className="flex items-center gap-2 ">
              <div
                // onClick={handleClick}
                className="btn h-10 w-10 rounded-full bg-primaryPurple lg:h-12 lg:w-12"
              ></div>
            </div>
            <ul
              tabIndex={0}
              className="dropdown-content rounded-box menu hidde absolute top-[55px] right-0 w-52 bg-white p-2 shadow-xl group-focus:block"
            >
              {/* menu  */}
              <li>
                <a>Item 1</a>
              </li>
              <li>
                <a>Item 2</a>
              </li>
              <li>
                <a>Item 3</a>
              </li>
            </ul>
          </button>

          -------------------------------------------------------------------------------------------

          daisy fuck ---------------------------------------
                    <div className=" group relative">
            {/* dropdown dropdown-end */}
            {/* <label tabIndex={0} className="btn  m-1"></label> */}
            <button>Click</button>
            <div>
              {/* dropdown-content menu rounded-box */}
              <ul
                // tabIndex={0}
                className=" absolute top-[47px] right-0 hidden w-52 bg-white p-2 shadow group-focus:block"
              >
                <li>
                  <a>Item 1</a>
                </li>
                <li>
                  <a>Item 2</a>
                </li>
              </ul>
            </div>
          </div>
          
          daisy fuck ends -------------------------------------------

                    <Dropdown
            open={open}
            trigger={
              <button onClick={handleOpen}>
                <div className="h-12 w-12 rounded-full bg-primaryPurple ring-primaryPurple focus:ring"></div>
              </button>
            }
            menu={[
              <buttom onClick={handleMenuOne}>1</buttom>,
              <buttom onClick={handleMenuOne}>2</buttom>,
            ]}
          />

          ---------------------- new working drop down ---------------------------
                    <button className="relative">
            <div className=" flex items-center gap-2 ">
              {/* dropdown button */}
              <div
                className="h-12 w-12 rounded-full bg-primaryPurple ring-primaryPurple focus:ring"
                onClick={handleOpen}
              ></div>
            </div>

            <div className="absolute right-0 top-full mt-1 w-max min-w-full rounded bg-yellow-200 shadow-md">
              {/* dropdown */}
              {open ? (
                <ul className="rounded border text-center">
                  <li className="border-b px-4 py-4">Akrobeto</li>
                  <li
                    onClick={handleProfileSettings}
                    className="border-b px-4 py-4"
                  >
                    menu list two
                  </li>
                  <li onClick={handleLogout} className="border-b px-4 py-4">
                    menu list three
                  </li>
                </ul>
              ) : null}
            </div>
          </button>

          ------------------------------- working drop down ends -----------------------------------------------



          ************************

                    <button className="relative">
            <div className="flex items-center gap-2 ">
              {/* dropdown button */}
              <div
                className="h-12 w-12 rounded-full bg-primaryPurple ring-primaryPurple focus:ring"
                // onClick={handleOpen}
              ></div>
            </div>

            <div className="absolute right-0 top-full mt-1 w-max min-w-full rounded bg-yellow-200 shadow-md">
              {/* dropdown */}

              <ul className="rounded border text-center">
                <li className="border-b px-4 py-4">Akrobeto</li>
                <li
                  // onClick={handleProfileSettings}
                  className="border-b px-4 py-4"
                >
                  menu list two
                </li>
                {/* onClick={handleLogout}  */}
                <li className="border-b px-4 py-4">menu list three</li>
              </ul>
            </div>
          </button>

          ***********************

          ///////////////////////////////////////////////////
            // user
  // const Dropdown = ({ open, trigger, menu }) => {
  //   return (
  //     <div className="dropdown">
  //       {trigger}
  //       {open ? (
  //         <ul className="menu">
  //           {menu.map((menuItem, index) => (
  //             <li key={index} className="menu-item">
  //               {menuItem}
  //             </li>
  //           ))}
  //         </ul>
  //       ) : null}
  //     </div>
  //   );
  // };



  ///////////////////////////////////////////////////

    //   // setOpenDropdown(true);
  //   // setOpenMenu(true);

  // if (setOpenDropdown === !openDropdown) {
//   return console.log('CLICKED DROP DOWN');
// } else {
//   return null;
// }

  // const handleProfileSettings = () => {
  //   // some code
  //   setOpen(false);
  // };

  // const handleLogout = () => {
  //   // some code
  //   setOpen(false);
  // };

  style="enable-background:new 0 0 21 21;"

             {/* bg-primaryPurpleTint text-primaryPurple */}
                        {/* <img src={Homeicon} alt="" /> */}
                        {/* <a href="!#"></a> */}

  ///////////////====================

  //  {
//    isOpen ? (
//  <React.Fragment>
//      <div onClick={() => setisOpen(null)}>
//        {/* svg here */}
//        <svg
//          // style="enable-background:new 0 0 21 21;"
//          version="1.1"
//          viewBox="0 0 23 23"
//          fill="none"
//          width="21"
//          height="21"
//          xmlns="http://www.w3.org/2000/svg"
//        >
//          <g id="black" />
//          <path
//            d="M23.6,10.3L13.2,2.4c-0.7-0.5-1.7-0.5-2.5,0L0.4,10.3C-0.4,10.9,0,12,1,12h1v6.1C2,20.2,3.8,22,6,22h2   c0.6,0,1-0.4,1-1v-4.9C9,15,9.9,14,11,14h2c1.1,0,2,1,2,2.1V21c0,0.5,0.4,1,1,1h2c2.2,0,4-1.8,4-3.9V12h1   C23.9,12,24.3,10.9,23.6,10.3z"
//            // fill="#121212"
//            fill="#707aff"
//          />
//        </svg>
//      </div>
//    ) : (
//      <div onClick={() => setisOpen(true)}>
//        {/* svg outcome here */}
//        <svg
//          // style="enable-background:new 0 0 21 21;"
//          version="1.1"
//          viewBox="0 0 23 23"
//          fill="none"
//          width="21"
//          height="21"
//          xmlns="http://www.w3.org/2000/svg"
//        >
//          <g id="purple" />
//          <path
//            d="M23.6,10.3L13.2,2.4c-0.7-0.5-1.7-0.5-2.5,0L0.4,10.3C-0.4,10.9,0,12,1,12h1v6.1C2,20.2,3.8,22,6,22h2   c0.6,0,1-0.4,1-1v-4.9C9,15,9.9,14,11,14h2c1.1,0,2,1,2,2.1V21c0,0.5,0.4,1,1,1h2c2.2,0,4-1.8,4-3.9V12h1   C23.9,12,24.3,10.9,23.6,10.3z"
//            // fill="#707aff"
//            fill="#121212"
//          />
//        </svg>
//      </div>
//</React.Fragment>
//    );
//  }                      



<svg
             version="1.1"
             viewBox="0 0 23 23"
             fill="none"
             width="21"
             height="21"
             xmlns="http://www.w3.org/2000/svg"
           >
             <g id="black" />
             <path
               d="M23.6,10.3L13.2,2.4c-0.7-0.5-1.7-0.5-2.5,0L0.4,10.3C-0.4,10.9,0,12,1,12h1v6.1C2,20.2,3.8,22,6,22h2   c0.6,0,1-0.4,1-1v-4.9C9,15,9.9,14,11,14h2c1.1,0,2,1,2,2.1V21c0,0.5,0.4,1,1,1h2c2.2,0,4-1.8,4-3.9V12h1   C23.9,12,24.3,10.9,23.6,10.3z"
               fill="#707aff"
             />
      </svg>
----------------------------

---------------------
    <NavLink
      to="/home"
      className={({ isActive }) =>
        [
          `<svg
             className='fill-current'
             version="1.1"
             viewBox="0 0 23 23"
             fill="none"
             width="21"
             height="21"
             xmlns="http://www.w3.org/2000/svg"
           >
             
             <path
               d="M23.6,10.3L13.2,2.4c-0.7-0.5-1.7-0.5-2.5,0L0.4,10.3C-0.4,10.9,0,12,1,12h1v6.1C2,20.2,3.8,22,6,22h2   c0.6,0,1-0.4,1-1v-4.9C9,15,9.9,14,11,14h2c1.1,0,2,1,2,2.1V21c0,0.5,0.4,1,1,1h2c2.2,0,4-1.8,4-3.9V12h1   C23.9,12,24.3,10.9,23.6,10.3z"
               fill="#707aff"
             />
      </svg>`,
          isActive ? `bg-primaryPurpleTint text-primaryPurple` : null,
        ]

          .filter(Boolean)
          .join(' ')
      }
    >
      {/* bg-primaryPurpleTint text-primaryPurple */}

      <a href="!#">
        <img src={Homeicon} alt="" />
      </a>
    </NavLink>
    ----------------------------------------------

      const toggleMenuTwo = () => {
    // if (openDropdown) {
    //   setOpenDropdown(!openDropdown);
    // }
    // setOpenMenu(!openMenu);

      const toggleMenuOne = () => {
    // if (openMenu) {
    //   setOpenMenu(!openMenu);
    // }
    // setOpenDropdown(!openDropdown);

    ----------------------------------------------

/// SCHEMA /// -------------------------------

import * as yup from 'yup';

const passwordRules = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}$/;

export const Schema = yup.object().shape({
  email: yup
    .string()
    .email('Enter a valid email')
    .required('Please enter email'),
  age: yup.number().positive().integer().required('Please enter age'),
  password: yup
    .string()
    .min(6, 'Password must be at least 6 characters')
    .matches(passwordRules, {
      message:
        'Password must be at least 6 characters long with at least 1 uppercase & 1 lowercase letter 1 number and 1 symbol',
    })
    .required('Password required'),
  confirmPassword: yup
    .string()
    .oneOf([yup.ref('password'), null], 'Passwords must match')
    .required('Conrfirm password'),
});
/// SCHEMA ENDS /// -------------------------------